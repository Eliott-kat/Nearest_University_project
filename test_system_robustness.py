#!/usr/bin/env python3
"""
Test de robustesse syst√®me pour AcadCheck
Tests complets pour d√©tecter et corriger les bugs potentiels
"""

import os
import sys
import tempfile
import logging
from io import BytesIO
from werkzeug.datastructures import FileStorage

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def test_authentication_system():
    """Test du syst√®me d'authentification"""
    print("üîê TEST SYST√àME D'AUTHENTIFICATION")
    print("-" * 40)
    
    from app import app, db
    from models import User, UserRole
    from werkzeug.security import generate_password_hash, check_password_hash
    
    with app.app_context():
        try:
            # Test 1: Cr√©ation d'utilisateur
            test_user = User.query.filter_by(email='test_robustesse@acadcheck.local').first()
            if test_user:
                db.session.delete(test_user)
                db.session.commit()
            
            new_user = User()
            new_user.id = 'test-robustesse-user'
            new_user.email = 'test_robustesse@acadcheck.local'
            new_user.password_hash = generate_password_hash('TestPassword123!')
            new_user.first_name = 'Test'
            new_user.last_name = 'Robustesse'
            new_user.role = UserRole.STUDENT
            new_user.active = True
            
            db.session.add(new_user)
            db.session.commit()
            print("‚úÖ Cr√©ation d'utilisateur r√©ussie")
            
            # Test 2: V√©rification mot de passe
            if check_password_hash(new_user.password_hash, 'TestPassword123!'):
                print("‚úÖ V√©rification mot de passe r√©ussie")
            else:
                print("‚ùå √âchec v√©rification mot de passe")
            
            # Test 3: Recherche utilisateur
            found_user = User.query.filter_by(email='test_robustesse@acadcheck.local').first()
            if found_user and found_user.first_name == 'Test':
                print("‚úÖ Recherche utilisateur r√©ussie")
            else:
                print("‚ùå √âchec recherche utilisateur")
            
            # Nettoyage
            db.session.delete(new_user)
            db.session.commit()
            print("‚úÖ Nettoyage r√©ussi")
            
        except Exception as e:
            print(f"‚ùå Erreur test authentification: {e}")
            db.session.rollback()

def test_file_upload_robustness():
    """Test robustesse upload de fichiers"""
    print("\nüìÅ TEST ROBUSTESSE UPLOAD")
    print("-" * 40)
    
    from app import app, db
    from models import User, Document, DocumentStatus
    from file_utils import save_uploaded_file, extract_text_from_file, get_file_size
    
    with app.app_context():
        try:
            demo_user = User.query.filter_by(email='demo@acadcheck.local').first()
            if not demo_user:
                print("‚ùå Utilisateur d√©mo non trouv√©")
                return
            
            # Test 1: Fichier texte normal
            test_content = "Ceci est un test de robustesse.\n" * 50
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
                f.write(test_content)
                temp_path = f.name
            
            try:
                with open(temp_path, 'rb') as f:
                    file_storage = FileStorage(
                        stream=BytesIO(f.read()),
                        filename='test_robustesse.txt',
                        content_type='text/plain'
                    )
                    
                    result = save_uploaded_file(file_storage)
                    if result:
                        print("‚úÖ Upload fichier texte r√©ussi")
                        file_path, filename = result
                        
                        # Test extraction
                        text = extract_text_from_file(file_path, 'text/plain')
                        if text and len(text) > 0:
                            print("‚úÖ Extraction texte r√©ussie")
                        else:
                            print("‚ùå √âchec extraction texte")
                    else:
                        print("‚ùå √âchec upload fichier")
                        
            finally:
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
            
            # Test 2: Fichier vide (cas limite)
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
                f.write("")  # Fichier vide
                temp_path = f.name
            
            try:
                with open(temp_path, 'rb') as f:
                    file_storage = FileStorage(
                        stream=BytesIO(f.read()),
                        filename='test_vide.txt',
                        content_type='text/plain'
                    )
                    
                    result = save_uploaded_file(file_storage)
                    if result:
                        print("‚úÖ Gestion fichier vide robuste")
                    else:
                        print("‚ö†Ô∏è Fichier vide rejet√© (comportement attendu)")
                        
            finally:
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
            
            # Test 3: Fichier avec caract√®res sp√©ciaux
            special_content = "Test avec √©√†√ß√º√± et ‰∏≠Êñá et emoji üéìüìù‚úÖ"
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
                f.write(special_content)
                temp_path = f.name
            
            try:
                with open(temp_path, 'rb') as f:
                    file_storage = FileStorage(
                        stream=BytesIO(f.read()),
                        filename='test_sp√©ciaux.txt',
                        content_type='text/plain'
                    )
                    
                    result = save_uploaded_file(file_storage)
                    if result:
                        file_path, filename = result
                        text = extract_text_from_file(file_path, 'text/plain')
                        if text and "√©√†√ß√º√±" in text:
                            print("‚úÖ Caract√®res sp√©ciaux g√©r√©s correctement")
                        else:
                            print("‚ö†Ô∏è Probl√®me avec caract√®res sp√©ciaux")
                    else:
                        print("‚ùå √âchec fichier caract√®res sp√©ciaux")
                        
            finally:
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    
        except Exception as e:
            print(f"‚ùå Erreur test upload: {e}")

def test_detection_algorithms():
    """Test robustesse algorithmes de d√©tection"""
    print("\nüîç TEST ALGORITHMES DE D√âTECTION")
    print("-" * 40)
    
    from app import app
    
    with app.app_context():
        try:
            from unified_detection_service import UnifiedDetectionService
            service = UnifiedDetectionService()
            
            # Test 1: Texte acad√©mique normal
            academic_text = """
            Cette √©tude examine les impacts environnementaux de l'√©nergie renouvelable.
            Les recherches montrent que les technologies solaires et √©oliennes contribuent
            significativement √† la r√©duction des √©missions de carbone. L'analyse des donn√©es
            r√©v√®le une corr√©lation positive entre l'adoption des √©nergies renouvelables
            et l'am√©lioration de la qualit√© de l'air dans les zones urbaines.
            """
            
            result = service.analyze_text(academic_text, "test_academique.txt")
            if result and 'plagiarism' in result:
                plagiarism_score = result['plagiarism']['percent']
                ai_score = result.get('ai_content', {}).get('percent', 0)
                print(f"‚úÖ Analyse texte acad√©mique: {plagiarism_score}% plagiat, {ai_score}% IA")
                
                # V√©rification scores r√©alistes
                if 0 <= plagiarism_score <= 100 and 0 <= ai_score <= 100:
                    print("‚úÖ Scores dans les limites attendues")
                else:
                    print(f"‚ö†Ô∏è Scores hors limites: plagiat={plagiarism_score}, IA={ai_score}")
            else:
                print("‚ùå √âchec analyse texte acad√©mique")
            
            # Test 2: Texte tr√®s court
            short_text = "Bonjour monde."
            result = service.analyze_text(short_text, "test_court.txt")
            if result:
                print("‚úÖ Gestion texte court robuste")
            else:
                print("‚ö†Ô∏è Probl√®me avec texte tr√®s court")
            
            # Test 3: Texte long
            long_text = "Cette phrase se r√©p√®te. " * 200
            result = service.analyze_text(long_text, "test_long.txt")
            if result:
                print("‚úÖ Gestion texte long robuste")
            else:
                print("‚ö†Ô∏è Probl√®me avec texte tr√®s long")
                
        except Exception as e:
            print(f"‚ùå Erreur test d√©tection: {e}")

def test_database_consistency():
    """Test consistance base de donn√©es"""
    print("\nüóÑÔ∏è TEST CONSISTANCE BASE DE DONN√âES")
    print("-" * 40)
    
    from app import app, db
    from models import User, Document, AnalysisResult
    
    with app.app_context():
        try:
            # Test 1: Comptage des enregistrements
            users_count = User.query.count()
            documents_count = Document.query.count()
            analyses_count = AnalysisResult.query.count()
            
            print(f"‚úÖ Enregistrements: {users_count} users, {documents_count} docs, {analyses_count} analyses")
            
            # Test 2: Int√©grit√© r√©f√©rentielle
            orphan_documents = Document.query.filter(~Document.user_id.in_(
                db.session.query(User.id)
            )).count()
            
            orphan_analyses = AnalysisResult.query.filter(~AnalysisResult.document_id.in_(
                db.session.query(Document.id)
            )).count()
            
            if orphan_documents == 0 and orphan_analyses == 0:
                print("‚úÖ Int√©grit√© r√©f√©rentielle maintenue")
            else:
                print(f"‚ö†Ô∏è Documents orphelins: {orphan_documents}, Analyses orphelines: {orphan_analyses}")
            
            # Test 3: Utilisateurs actifs
            active_users = User.query.filter_by(active=True).count()
            print(f"‚úÖ Utilisateurs actifs: {active_users}")
            
        except Exception as e:
            print(f"‚ùå Erreur test base de donn√©es: {e}")

def test_error_handling():
    """Test gestion d'erreurs"""
    print("\n‚ö†Ô∏è TEST GESTION D'ERREURS")
    print("-" * 40)
    
    from app import app
    
    with app.app_context():
        try:
            # Test 1: Service avec fichier inexistant
            from unified_detection_service import UnifiedDetectionService
            service = UnifiedDetectionService()
            
            result = service.analyze_text("", "fichier_vide.txt")
            if result:
                print("‚úÖ Gestion texte vide robuste")
            else:
                print("‚ö†Ô∏è Texte vide rejet√© (comportement attendu)")
            
            # Test 2: Caract√®res non-UTF8 (simulation)
            try:
                problematic_text = "Test normal avec du texte r√©gulier"
                result = service.analyze_text(problematic_text, "test_encoding.txt")
                if result:
                    print("‚úÖ Gestion encodage robuste")
            except Exception as e:
                print(f"‚ö†Ô∏è Probl√®me encodage g√©r√©: {str(e)[:50]}...")
                
        except Exception as e:
            print(f"‚ùå Erreur test gestion d'erreurs: {e}")

def main():
    """Fonction principale de test"""
    print("üöÄ D√âMARRAGE TESTS DE ROBUSTESSE ACADCHECK")
    print("=" * 50)
    
    # V√©rifier l'environnement
    if not os.path.exists('app.py'):
        print("‚ùå Fichier app.py non trouv√©. Ex√©cutez depuis le dossier racine.")
        sys.exit(1)
    
    # Ex√©cuter tous les tests
    test_authentication_system()
    test_file_upload_robustness()
    test_detection_algorithms()
    test_database_consistency()
    test_error_handling()
    
    print("\nüéØ TESTS DE ROBUSTESSE TERMIN√âS")
    print("=" * 50)
    print("V√©rifiez les r√©sultats ci-dessus pour identifier les am√©liorations n√©cessaires.")

if __name__ == "__main__":
    main()