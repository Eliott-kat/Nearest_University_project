#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test de d√©bogage de l'algorithme de d√©tection
"""

import os
import sys
sys.path.append('.')

from unified_detection_service import UnifiedDetectionService
from sentence_bert_detection import SentenceBertDetection
from utils.ai_gptzero_like import AIDetectionService

def test_algorithm():
    """Test simple de l'algorithme avec du texte connu"""
    
    # Texte de test avec du contenu clairement probl√©matique
    test_text = """
    La biodiversit√© est l'ensemble des √™tres vivants ainsi que les √©cosyst√®mes dans lesquels ils √©voluent. 
    Ce terme comprend √©galement les interactions des esp√®ces entre elles et avec leurs milieux. 
    La biodiversit√© fait partie int√©grante du fonctionnement de la biosph√®re et de sa capacit√© d'adaptation. 
    Elle est consid√©r√©e comme une des ressources vitales du d√©veloppement durable.
    
    Les √©cosyst√®mes forestiers abritent plus de 80% de la biodiversit√© terrestre mondiale.
    Ces environnements complexes constituent des r√©servoirs g√©n√©tiques essentiels pour l'humanit√©.
    La d√©forestation repr√©sente une menace majeure pour la conservation de cette richesse biologique.
    Les for√™ts tropicales, en particulier, contiennent une diversit√© exceptionnelle d'esp√®ces end√©miques.
    """
    
    print("üî¨ Test de l'algorithme de d√©tection")
    print("=" * 50)
    
    try:
        # Test 1: Service unifi√©
        print("\n1. Test du service unifi√©:")
        unified_service = UnifiedDetectionService()
        result = unified_service.analyze_text(test_text, "test_debug.txt")
        
        if result and 'success' in result:
            print(f"‚úÖ R√©sultat unifi√©: {result['plagiarism_score']}% plagiat, {result['ai_score']}% IA")
            print(f"   Service utilis√©: {result.get('service_used', 'inconnu')}")
        else:
            print(f"‚ùå √âchec du service unifi√©: {result}")
            
    except Exception as e:
        print(f"‚ùå Erreur service unifi√©: {str(e)}")
        import traceback
        traceback.print_exc()
    
    try:
        # Test 2: Sentence-BERT seul
        print("\n2. Test Sentence-BERT:")
        bert_detector = SentenceBertDetection()
        bert_result = bert_detector.detect_plagiarism(test_text)
        
        if bert_result:
            print(f"‚úÖ Sentence-BERT: {bert_result.get('similarity_score', 0):.1f}% de similarit√©")
            print(f"   Phrases d√©tect√©es: {len(bert_result.get('highlighted_sentences', []))}")
        else:
            print("‚ùå √âchec Sentence-BERT")
            
    except Exception as e:
        print(f"‚ùå Erreur Sentence-BERT: {str(e)}")
        import traceback
        traceback.print_exc()
    
    try:
        # Test 3: D√©tection IA seule
        print("\n3. Test d√©tection IA:")
        ai_detector = AIDetectionService()
        ai_result = ai_detector.detect_ai_content(test_text)
        
        if ai_result:
            print(f"‚úÖ D√©tection IA: {ai_result.get('ai_probability', 0):.1f}% IA d√©tect√©e")
            print(f"   Phrases analys√©es: {len(ai_result.get('sentence_scores', []))}")
        else:
            print("‚ùå √âchec d√©tection IA")
            
    except Exception as e:
        print(f"‚ùå Erreur d√©tection IA: {str(e)}")
        import traceback
        traceback.print_exc()
    
    # Test 4: V√©rifier la base de donn√©es locale
    print("\n4. V√©rification base de donn√©es:")
    try:
        import sqlite3
        db_path = "sentence_bert_database.db"
        if os.path.exists(db_path):
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM documents")
            count = cursor.fetchone()[0]
            print(f"‚úÖ Base de donn√©es: {count} documents stock√©s")
            conn.close()
        else:
            print("‚ö†Ô∏è Base de donn√©es non trouv√©e")
    except Exception as e:
        print(f"‚ùå Erreur base de donn√©es: {str(e)}")

if __name__ == "__main__":
    test_algorithm()