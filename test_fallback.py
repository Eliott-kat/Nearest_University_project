#!/usr/bin/env python3
"""
Test du syst√®me de fallback automatique entre APIs
"""
import os
import sys
import logging

# Set up basic logging
logging.basicConfig(level=logging.INFO)

# Add current directory to path for imports
sys.path.insert(0, '.')

def test_api_fallback():
    """Tester le m√©canisme de fallback automatique"""
    print("üîÑ TEST DU SYST√àME DE FALLBACK AUTOMATIQUE")
    print("=" * 50)
    
    try:
        from simple_api_switch import get_active_service
        
        print("\nüìã CONFIGURATION ACTUELLE:")
        current_provider = os.environ.get('PLAGIARISM_API_PROVIDER', 'copyleaks')
        copyleaks_email = os.environ.get('COPYLEAKS_EMAIL', 'Non configur√©')
        copyleaks_key = '***' if os.environ.get('COPYLEAKS_API_KEY') else 'Non configur√©'
        plagiarismcheck_token = '***' if os.environ.get('PLAGIARISMCHECK_API_TOKEN') else 'Non configur√©'
        
        print(f"Provider principal: {current_provider}")
        print(f"Copyleaks Email: {copyleaks_email}")
        print(f"Copyleaks API Key: {copyleaks_key}")
        print(f"PlagiarismCheck Token: {plagiarismcheck_token}")
        
        print("\nüîß INITIALISATION DU SERVICE:")
        service = get_active_service()
        print(f"Service principal initialis√©: {service._get_service_name(service._current_service)}")
        
        print("\nüîê TEST D'AUTHENTIFICATION:")
        auth_result = service.authenticate()
        print(f"R√©sultat authentification: {'‚úÖ Succ√®s' if auth_result else '‚ùå √âchec'}")
        
        if auth_result:
            print(f"Service actuel apr√®s auth: {service._get_service_name(service._current_service)}")
            print(f"Token disponible: {'‚úÖ Oui' if service.token else '‚ùå Non'}")
        
        print("\nüìä ANALYSE DES SERVICES DISPONIBLES:")
        
        # Test Copyleaks
        copyleaks_configured = service._is_service_configured(service.copyleaks_service)
        print(f"Copyleaks configur√©: {'‚úÖ' if copyleaks_configured else '‚ùå'}")
        
        # Test PlagiarismCheck  
        plagiarismcheck_configured = service._is_service_configured(service.plagiarismcheck_service)
        print(f"PlagiarismCheck configur√©: {'‚úÖ' if plagiarismcheck_configured else '‚ùå'}")
        
        # Test fallback
        fallback_service = service._get_fallback_service()
        if fallback_service:
            print(f"Service de fallback: {service._get_service_name(fallback_service)}")
        else:
            print("Aucun service de fallback disponible")
        
        print("\nüéØ RECOMMANDATIONS:")
        
        if not copyleaks_configured and not plagiarismcheck_configured:
            print("‚ö†Ô∏è  Aucune API configur√©e - seulement mode d√©monstration disponible")
            print("   Configurez au moins une API pour des r√©sultats r√©els")
        elif copyleaks_configured and not plagiarismcheck_configured:
            print("üí° Copyleaks configur√©, ajoutez PlagiarismCheck pour plus de redondance")
            print("   PLAGIARISMCHECK_API_TOKEN=votre-token-ici")
        elif not copyleaks_configured and plagiarismcheck_configured:
            print("üí° PlagiarismCheck configur√©, ajoutez Copyleaks pour plus de redondance")
            print("   COPYLEAKS_EMAIL=votre@email.com")
            print("   COPYLEAKS_API_KEY=votre-cle-api")
        else:
            print("‚úÖ Excellent ! Les deux APIs sont configur√©es")
            print("   Fallback automatique disponible en cas de panne")
        
        print("\nüöÄ STATUT GLOBAL:")
        if auth_result:
            print("‚úÖ Syst√®me pr√™t avec API r√©elle")
        elif copyleaks_configured or plagiarismcheck_configured:
            print("‚ö†Ô∏è  APIs configur√©es mais indisponibles - basculement en mode d√©mo")
        else:
            print("‚ùå Mode d√©monstration uniquement")
        
        return auth_result
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

if __name__ == "__main__":
    # Charger les variables d'environnement si possible
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        pass
    
    test_api_fallback()
    
    print("\n" + "=" * 50)
    print("üîÑ Test du fallback termin√© !")