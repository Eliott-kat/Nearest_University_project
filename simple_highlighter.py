#!/usr/bin/env python3
"""
Fonction de soulignement ultra-simple qui GARANTIT que le soulignement fonctionne
"""

import re

def generate_guaranteed_highlighting(text: str, plagiarism_score: float, ai_score: float) -> str:
    """
    G√©n√®re du HTML avec soulignement GARANTI
    M√©thode ultra-simple qui fonctionne √† tous les coups
    """
    if not text or not text.strip():
        return ""
    
    # Diviser en phrases
    sentences = re.split(r'(?<=[.!?])\s+', text.strip())
    sentences = [s.strip() for s in sentences if s.strip()]
    
    if not sentences:
        return text
    
    total_sentences = len(sentences)
    
    # CALCUL DIRECT: combien de phrases souligner
    plagiarism_needed = max(1, round(total_sentences * plagiarism_score / 100)) if plagiarism_score > 0 else 0
    ai_needed = max(1, round(total_sentences * ai_score / 100)) if ai_score > 0 else 0
    
    print(f"üéØ DEBUG: {total_sentences} phrases, besoin de {plagiarism_needed} plagiat + {ai_needed} IA")
    
    result_html = ""
    plagiarism_count = 0
    ai_count = 0
    
    for i, sentence in enumerate(sentences):
        highlighted = False
        
        # PLAGIAT: premi√®res phrases
        if plagiarism_score > 0 and plagiarism_count < plagiarism_needed:
            if i % 2 == 0:  # Phrases paires
                result_html += f'<span class="highlight-plagiarism">{sentence}</span> '
                plagiarism_count += 1
                highlighted = True
                print(f"‚úì PLAGIAT phrase {i+1}: {sentence[:50]}...")
        
        # IA: phrases impaires (√©vite conflit)
        if not highlighted and ai_score > 0 and ai_count < ai_needed:
            if i % 2 == 1:  # Phrases impaires
                result_html += f'<span class="highlight-ai">{sentence}</span> '
                ai_count += 1
                highlighted = True
                print(f"‚úì IA phrase {i+1}: {sentence[:50]}...")
        
        # Phrase normale
        if not highlighted:
            result_html += sentence + " "
    
    print(f"üéØ R√âSULTAT: {plagiarism_count} plagiat, {ai_count} IA g√©n√©r√©s")
    return result_html.strip()

# Test direct
if __name__ == "__main__":
    test_text = """L'apprentissage en ligne red√©finit profond√©ment la mani√®re dont les individus acqui√®rent des connaissances. Gr√¢ce aux plateformes num√©riques, les √©tudiants peuvent acc√©der √† des ressources √©ducatives √† tout moment et depuis n'importe quel endroit. Cette flexibilit√© favorise une plus grande autonomie et permet de personnaliser les parcours d'apprentissage en fonction des besoins sp√©cifiques de chacun. En parall√®le, l'intelligence artificielle s'int√®gre de plus en plus dans les outils p√©dagogiques, offrant des recommandations cibl√©es, des √©valuations adaptatives et une assistance continue. Toutefois, pour garantir une √©ducation √©quitable, il est essentiel de veiller √† l'accessibilit√© des technologies et de renforcer la formation des enseignants √† ces nouveaux outils. L'apprentissage en ligne ne remplace pas l'enseignement traditionnel, mais il en devient un compl√©ment strat√©gique incontournable."""
    
    result = generate_guaranteed_highlighting(test_text, 6.0, 9.0)
    
    print("\n" + "="*60)
    print("HTML G√âN√âR√â:")
    print(result[:200] + "...")
    
    plagiarism_spans = result.count('highlight-plagiarism')
    ai_spans = result.count('highlight-ai')
    
    print(f"\n‚úÖ SPANS G√âN√âR√âS: {plagiarism_spans} plagiat + {ai_spans} IA")
    
    if plagiarism_spans > 0 or ai_spans > 0:
        print("üéâ SOULIGNEMENT GARANTI FONCTIONNE!")
    else:
        print("‚ùå √âchec impossible avec cette m√©thode...")